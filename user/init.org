* List of Used Packages
** Diverse

- el-get
- ace
- smex
- ido-vertical-mode
- ido-universal
- grizzl
- flx-ido
- helm-swoop
- icicles
- windmove (built-in)
- buffer-move
: ================================================================
- bookmark+
- deft
- powerline
- calfw
: ================================================================
- paredit
- hl-sexp
- multiple-cursors
- rainbow-delimiters
- litable
- moe-theme
- linum-relative
** Own libraries

- org-notes :: Note taking framework
- org-pm :: Publish any org-mode file or section to multiple projects

** To examine

- FrameMove
- toggle-window-split


* Prepare el-get and Load Packages

** El-get setup

** Load third party packages

#+BEGIN_SRC emacs-lisp
  (require 'bookmark+)
#+END_SRC

** Load own el-get packages

#+BEGIN_SRC emacs-lisp
  (el-get-install 'org-pm)
  (require 'org-pm)
  (el-get-install 'org-notes)
  (require 'org-notes)
#+END_SRC

* General
** Theme
   :PROPERTIES:
   :ORDERED:  t
   :END:

#+Begin_SRC emacs-lisp
  ;; (load-theme 'tangotango) ;; disagrees with helm-selection face color
  ;; (load-theme 'zenburn)
  (require 'moe-theme)
  (setq powerline-moe-theme t)
  (moe-dark)
  (require 'powerline)
  (powerline-default-theme)
  (require 'linum-relative)
#+End_SRC
** Fonts

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Anonymous Pro-12"))

  (set-face-attribute 'default nil :font "Anonymous Pro-12")

  (defun larger-frame-font ()
    (interactive)

    (set-face-attribute
     'default nil
     :height
     (+ (face-attribute 'default :height) 10)) )

  (defun smaller-frame-font ()
    (interactive)
    (set-face-attribute
     'default nil
     :height
     (- (face-attribute 'default :height) 10)) )

  (global-set-key (kbd "C-c C--") 'smaller-frame-font)
  (global-set-key (kbd "C-c C-+") 'larger-frame-font)
#+END_SRC

** Cursor

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 1)
  (setq visible-bell t)
#+END_SRC

** Navigation
*** Helm
    :PROPERTIES:
    :ID:       31AE1C7E-4F16-4295-9E4F-23A47DD8DC7C
    :eval-id:  8
    :END:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-X") 'helm-M-x)
  (global-set-key (kbd "C-S-h m") 'helm-mini)
  (global-set-key (kbd "C-S-h b") 'helm-bookmarks)
  (global-set-key (kbd "C-S-h l") 'helm-buffers-list)
  (global-set-key (kbd "C-S-h s") 'helm-swoop)
  (global-set-key (kbd "C-S-h f") 'helm-find-files)
  (global-set-key (kbd "C-S-h o") 'helm-occur)
  (global-set-key (kbd "C-S-h i") 'helm-imenu)

  (defun helm-ack ()
    (interactive)
    (let ((helm-grep-use-ack-p t))
      (helm-do-grep)))

  (global-set-key (kbd "C-S-h a") 'helm-ack)
#+END_SRC

*** Cursor movement, Windmove, Buffer-move
    :PROPERTIES:
    :ID:       554F608B-79DB-4C3C-91F3-0B04090C3BB2
    :eval-id:  4
    :END:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-<") 'beginning-of-buffer)
  (global-set-key (kbd "s->") 'end-of-buffer)
  (global-set-key (kbd "s-S-<right>") 'windmove-right)
  (global-set-key (kbd "s-S-<left>") 'windmove-left)
  (global-set-key (kbd "s-S-<up>") 'windmove-up)
  (global-set-key (kbd "s-S-<down>") 'windmove-down)
  (global-set-key (kbd "s-M-<right>") 'buf-move-right)
  (global-set-key (kbd "s-M-<left>") 'buf-move-left)
  (global-set-key (kbd "s-M-<up>") 'buf-move-up)
  (global-set-key (kbd "s-M-<down>") 'buf-move-down)
#+END_SRC

*** Ace-jump

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-a c") 'ace-jump-char-mode)
  (global-set-key (kbd "C-S-a w") 'ace-jump-word-mode)
  (global-set-key (kbd "C-S-a l") 'ace-jump-line-mode)
  (global-set-key (kbd "C-S-a b") 'ace-jump-buffer)
  (global-set-key (kbd "C-S-a d") 'ace-window)
  (global-set-key (kbd "C-S-a W") 'ace-window)
#+END_SRC
** Command Completion and Auto-Complete
#+BEGIN_SRC emacs-lisp
  (require 'ido)
  (require 'flx-ido)
  (require 'ido-vertical-mode)
  (ido-mode t)
  (ido-vertical-mode t)
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
  (require 'auto-complete)
  (require 'auto-complete-config)
  (ac-config-default)
#+END_SRC
** Grizzl

#+BEGIN_SRC emacs-lisp
  (setq *grizzl-read-max-results* 70)
#+END_SRC
** Reload init file
#+BEGIN_SRC emacs-lisp
  (defun reload-init-fie ()
    "Reload the init file without restarting emacs."
    (interactive)
    (load-file (file-truename "~/.emacs.d/personal/init.el")))
#+END_SRC
* Modes
** Emacs-lisp-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'hl-sexp-mode)
  (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
  (global-set-key (kbd "C-s-L l") 'hs-hide-level) ;; there is no show level
  (global-set-key (kbd "C-s-L A") 'hs-show-all)
  (global-set-key (kbd "C-s-L a") 'hs-hide-all)
  (global-set-key (kbd "C-s-L b") 'hs-hide-block)
  (global-set-key (kbd "C-s-L B") 'hs-show-block)

  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
  (require 'paredit) ;; smart edit parentheses
  (require 'cl)      ;; include common lisp library
  (require 'litable) ;; show lisp eval results in the buffer, interactively
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
  ;; (add-hook 'emacs-lisp-mode-hook 'turn-on-whitespace-mode) ;; not defined
  (add-hook 'emacs-lisp-mode-hook 'auto-complete-mode) ;; fails?
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  ;; H-C-i:
  (define-key emacs-lisp-mode-map (kbd "H-TAB") 'icicle-imenu-command)
#+END_SRC

** Org-Mode

*** Turn on org indent mode

#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

*** Code text coloring in org mode source code blocks

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
*** Keyboard shortcuts for org-mode                                  :ATTACH:
    :PROPERTIES:
    :Attachments: test-attacment-1.org
    :ID:       513D7E02-3ADD-4542-8F13-369A8C351F16
    :END:
#+BEGIN_SRC emacs-lisp
  ;; icicle key binding conflicts fixed with:
  ;; M-x customize-group RET Icicles-Key-Bindings

  (add-hook 'org-mode-hook
            (lambda ()
              (icy-mode)
              (visual-line-mode)
              (whitespace-mode -1)))

#+END_SRC

** SuperCollider

Setup:

#+BEGIN_SRC emacs-lisp
  (require 'sclang)
  (defvar sc_userAppSupportDir
    (expand-file-name "~/Library/Application Support/SuperCollider"))

  ;; Make path of sclang executable available to emacs shell load path

  ;; For Version 3.6.6:
  (add-to-list
   'exec-path
   "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/")

  ;; For Version 3.7:
  (add-to-list
   'exec-path
   "/Applications/SuperCollider/SuperCollider.app/Contents/MacOS/")

  ;; Disable switching to default SuperCollider Workspace when recompiling SClang
  (setq sclang-show-workspace-on-startup nil)

  ;; Customize sclang mode:
  (add-hook 'sclang-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'sclang-mode-hook 'hl-sexp-mode)
  (add-hook 'sclang-mode-hook 'hs-minor-mode)
  (add-hook 'sclang-mode-hook 'electric-pair-mode)
  ;; (add-hook 'sclang-mode-hook 'yas-minor-mode)
  (add-hook 'sclang-mode-hook 'auto-complete-mode)
  (add-hook 'sclang-mode-hook 'paredit-mode)
#+END_SRC
Shortcuts:

#+BEGIN_SRC emacs-lisp
  ;; Global keyboard shortcut for starting sclang
  (global-set-key (kbd "C-c M-s") 'sclang-start)
  ;; Show workspace
  (global-set-key (kbd "C-c C-M-w") 'sclang-switch-to-workspace)
#+END_SRC
** magit

#+BEGIN_SRC emacs-lisp
(setq magit-last-seen-setup-instructions "1.4.0")
#+END_SRC

** deft

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-d") 'deft)
  (setq deft-text-mode 'org-mode)
  (setq deft-extension "org")
  (setq deft-use-filename-as-title t)
#+END_SRC
